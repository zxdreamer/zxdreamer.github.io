<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dreamer</title>
  
  <subtitle>莫厌追欢笑语频，寻思离乱好伤神。闲来屈指从头数，得见清平有几人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-15T07:08:34.973Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>梦的蓝天</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线程池和无锁队列实现并发</title>
    <link href="http://yoursite.com/2019/09/15/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%92%8C%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91/"/>
    <id>http://yoursite.com/2019/09/15/线程池和无锁队列实现并发/</id>
    <published>2019-09-15T06:54:17.000Z</published>
    <updated>2019-09-15T07:08:34.973Z</updated>
    
    <content type="html"><![CDATA[<p>通过一个在项目中使用的服务器编程的例子，记录一下怎样通过线程池和原子操作实现并发编程<br>原始模型是：一个生产者，一个缓存队列，两个消费者，一个条件变量。<br>线程池模型是：线程池中的线程做生产者，分别绑定一个缓存队列，每个缓存队列绑定两个消费者<br>工作过程：线程池中的线程将数据写入自己绑定的队列中，当缓存到达一半时，使用条件变量唤醒两个消费者，迅速将数据消费完<br>      缓存队列的读写指针，使用C++11的原子变量，保证两个写者之间的同步。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pack_max 512*1024*1024</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myatomic</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">atomic_int</span> rd;</span><br><span class="line"><span class="keyword">atomic_int</span> wd:</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myCmd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> cmd;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">50</span>];</span><br><span class="line"><span class="built_in">string</span> ip;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//共享变量</span></span><br><span class="line">myatomic ato_rw1&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">myCmd Buffer1[pack_max];</span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creator</span><span class="params">(<span class="built_in">string</span> ip,<span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf1[<span class="number">50</span>];</span><br><span class="line">read(fd,buf1,len);</span><br><span class="line">myCmd inbuf;</span><br><span class="line"><span class="comment">//填充inbuf</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">Buffer1[ato_rw1.wd] = inbuf;</span><br><span class="line">ato_rw1 = (ato_rw1+<span class="number">1</span>)%pack_max;</span><br><span class="line"><span class="keyword">if</span>((ato_rw1.wd-ato_rw1.rd)&gt;pack_max/<span class="number">2</span> || (ato_rw1.wd&lt;ato_rw1.rd &amp;&amp; ato_rw1.wd+pack_max-ato_rw1.rd&gt;pack_max/<span class="number">2</span>))</span><br><span class="line">pthread_cont_boardcast();   <span class="comment">//唤醒所有消费者</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!((ato_rw1.wd-ato_rw1.rd)&gt;pack_max/<span class="number">2</span> || (ato_rw1.wd&lt;ato_rw1.rd &amp;&amp; ato_rw1.wd+pack_max-ato_rw1.rd&gt;pack_max/<span class="number">2</span>)))</span><br><span class="line">pthread_cont_wait();</span><br><span class="line">myCmd outbuf = Buffer1[ato_rw1.rd];</span><br><span class="line">ato_rw1.rd = (ato_rw1.rd+<span class="number">1</span>)%pack_max;</span><br><span class="line"><span class="comment">//outbuf写入数据库</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!((ato_rw1.wd-ato_rw1.rd)&gt;pack_max/<span class="number">2</span> || (ato_rw1.wd&lt;ato_rw1.rd &amp;&amp; ato_rw1.wd+pack_max-ato_rw1.rd&gt;pack_max/<span class="number">2</span>)))</span><br><span class="line">pthread_cont_wait();</span><br><span class="line">myCmd outbuf = Buffer1[ato_rw1.rd];</span><br><span class="line">ato_rw1.rd = (ato_rw1.rd+<span class="number">1</span>)%pack_max;</span><br><span class="line"><span class="comment">//outbuf写入数据库</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过一个在项目中使用的服务器编程的例子，记录一下怎样通过线程池和原子操作实现并发编程&lt;br&gt;原始模型是：一个生产者，一个缓存队列，两个消费者，一个条件变量。&lt;br&gt;线程池模型是：线程池中的线程做生产者，分别绑定一个缓存队列，每个缓存队列绑定两个消费者&lt;br&gt;工作过程：线程池中的线程将数据写入自己绑定的队列中，当缓存到达一半时，使用条件变量唤醒两个消费者，迅速将数据消费完&lt;br&gt;      缓存队列的读写指针，使用C++11的原子变量，保证两个写者之间的同步。&lt;/p&gt;
    
    </summary>
    
    
      <category term="并发编程" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++11原子操作一</title>
    <link href="http://yoursite.com/2019/09/12/C-11%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E4%B8%80/"/>
    <id>http://yoursite.com/2019/09/12/C-11原子操作一/</id>
    <published>2019-09-12T02:17:29.000Z</published>
    <updated>2019-09-12T02:27:37.432Z</updated>
    
    <content type="html"><![CDATA[<p>当有多个线程同时对一个共享变量进行读取的时候，使用原子变量比使用互斥锁的效率提升几十倍</p><a id="more"></a><p>声明原子变量重要有两种形式:<br>    1、atomic_xxx:对于基本数据类型C++11定义了类似内部类型的声明方式<br>        例子：atomic_int,atomic_llong,atomic_char等<br>    2、atomic<xxx>:对于任意数据类型都可以封装成原子数据类型，xxx代表任意数据类型<br>        例子：atomic<string>,atomic<int>等<br>原子变量的操作有两种形式：<br>    1、类似普通变量的+,-,&amp;,^,++,–,|等<br>    2、操作函数load,store,fetch_add,fetch_sub,分别对应读取，赋值，加，减操作。<br>特殊的原子变量类型：<br>    atomic_flag类型<br>    对于复杂数据类型原子操作并不能保证一定是无锁的，因为数据类型内部的操作不清楚。<br>    但是atomic_flag一定保证数据时无锁的.只提供两个成员函数test_and_set、clear。<br>    所以其他的类型都会有is_lock_free来判断是否是无锁的。atomic_flag只支持<br>    test_and_set以及clear两个成员函数，test_and_set函数检查 std::atomic_flag 标志，<br>    如果 std::atomic_flag 之前没有被设置过，则设置 std::atomic_flag 的标志，<br>    并返回先前该 std::atomic_flag 对象是否被设置过，如果之前 std::atomic_flag<br>    对象已被设置，则返回 true，否则返回 false；clear函数清除 std::atomic_flag<br>    标志使得下一次调用 std::atomic_flag::test_and_set 返回 false。</int></string></xxx></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子1.原子变量的基本操作</span></span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">atomic_llong</span> total = <span class="number">0</span>;            <span class="comment">// atomic_llong相当于long long，但是本身就拥有原子性</span></span><br><span class="line"><span class="comment">//std::atomic&lt;int&gt; toltal = 0;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000L</span>L; ++i)</span><br><span class="line">&#123;</span><br><span class="line">total += i;   <span class="comment">//相当于total.fetch_add(i)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a = total;   <span class="comment">//相当于int a = total.load()；</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t1</span><span class="params">(func)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t2</span><span class="params">(func)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; total &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;     <span class="comment">// 9999999900000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例子2.atomic_flag</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (flag.test_and_set(<span class="built_in">std</span>::memory_order_acquire))    <span class="comment">// 在主线程中设置为true，需要等待t2线程clear</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"wait"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"do something"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"start"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">flag.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">flag.test_and_set();             <span class="comment">// 设置状态</span></span><br><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t1</span><span class="params">(func1)</span></span>;</span><br><span class="line">Sleep(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t2</span><span class="params">(func2)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当有多个线程同时对一个共享变量进行读取的时候，使用原子变量比使用互斥锁的效率提升几十倍&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础知识" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>fork引发的死锁问题</title>
    <link href="http://yoursite.com/2019/09/03/fork%E5%BC%95%E5%8F%91%E7%9A%84%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/09/03/fork引发的死锁问题/</id>
    <published>2019-09-03T08:46:57.000Z</published>
    <updated>2019-09-15T07:08:47.219Z</updated>
    
    <content type="html"><![CDATA[<p>fork用于创建子进程，当父进程中拥有了子线程，fork出的子进程只会拥有执行fork函数的线程的副本，并不会拥有全部子线程<br>也就是说此时子进程其实是”孤家寡人”，但是子进程会用于父进程创建的互斥锁，条件变量和读写锁的副本，同时会保留当时的状态。对于一个互斥锁。如果子线程中获得<br>了锁，执行fork的线程阻塞，此时如果fork出的子进程再加锁，此时在子进程中就出现了死锁。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> lock =  PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">sub_thread</span><span class="params">(<span class="keyword">void</span> *unused)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_lock(&amp;lock);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---sub thread lock---\n"</span>);</span><br><span class="line">sleep(<span class="number">3</span>);</span><br><span class="line">pthread_mutex_unlock(&amp;lock);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---sub thread unlock---\n"</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pid;</span><br><span class="line"><span class="keyword">pthread_t</span> pt;</span><br><span class="line">pthread_create(&amp;pt,<span class="literal">NULL</span>,sub_thread,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">usleep(<span class="number">500</span>);</span><br><span class="line"><span class="keyword">if</span>((pid = fork()) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"fork failed\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ID %d children\n"</span>,getpid());</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">pthread_mutex_lock(&amp;lock);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---children locked---\n"</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">pthread_mutex_unlock(&amp;lock);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---child unlock---\n"</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ID %d father\n"</span>,getpid());</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_lock(&amp;lock);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---father lock---\n"</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">pthread_mutex_unlock(&amp;lock);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---father unlocked---\n"</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br>—sub thread lock—<br>—sub thread unlock—<br>—father lock—<br>—father unlocked—<br>—sub thread lock—<br>我们发现子进程并没有执行。<br>我们可以得出子进程载条用exec函数之前可以做的事情：<br>我们不能调用函数中通过锁来保持线程安全的函数，比如printf</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fork用于创建子进程，当父进程中拥有了子线程，fork出的子进程只会拥有执行fork函数的线程的副本，并不会拥有全部子线程&lt;br&gt;也就是说此时子进程其实是”孤家寡人”，但是子进程会用于父进程创建的互斥锁，条件变量和读写锁的副本，同时会保留当时的状态。对于一个互斥锁。如果子线程中获得&lt;br&gt;了锁，执行fork的线程阻塞，此时如果fork出的子进程再加锁，此时在子进程中就出现了死锁。&lt;/p&gt;
    
    </summary>
    
    
      <category term="并发编程" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://yoursite.com/2019/08/30/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/30/单例模式/</id>
    <published>2019-08-30T02:05:15.000Z</published>
    <updated>2019-08-30T02:05:54.040Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tank</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">~tank();</span><br><span class="line"><span class="function"><span class="keyword">static</span> tank* <span class="title">getObj</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getID</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">tank()</span><br><span class="line">&#123;</span><br><span class="line">g_id = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">tank(<span class="keyword">const</span> tank&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">tank&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> tank&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">static</span> tank *obj;</span><br><span class="line"><span class="keyword">int</span> g_id;</span><br><span class="line"><span class="keyword">static</span> mutex mx;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tank.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">tank::~tank()</span><br><span class="line">&#123;</span><br><span class="line">g_id--;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~tank"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tank::getID()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ++g_id;</span><br><span class="line">&#125;</span><br><span class="line">tank* tank::getObj()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">mx.lock();</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">NULL</span>)</span><br><span class="line">obj = <span class="keyword">new</span> tank();</span><br><span class="line">mx.unlock();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态成员初始化一次</span></span><br><span class="line">tank* tank::obj = <span class="literal">NULL</span>;</span><br><span class="line">mutex tank::mx;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tank *t1=tank::getObj();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t1-&gt;getID() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tank *t2 = tank::getObj();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t2-&gt;getID() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://yoursite.com/2019/08/30/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/08/30/排序算法/</id>
    <published>2019-08-30T01:57:51.000Z</published>
    <updated>2019-08-30T02:00:09.314Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">void BubbleSort2(SqList *L)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;L-&gt;length &amp;&amp; flag == <span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=L-&gt;length<span class="number">-2</span>;j&gt;=i;j--)</span><br><span class="line">            <span class="keyword">if</span>(L-&gt;r[j] &gt; L-&gt;r[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                swap(L,j,j+<span class="number">1</span>);</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void InsertSort(SqList *L)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,key;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;L-&gt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(L-&gt;r[i] &lt; L-&gt;r[i<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            key = L-&gt;r[i];        <span class="comment">//set watcher to permit j to lower then 0</span></span><br><span class="line">            <span class="keyword">for</span>(j = i<span class="number">-1</span>;j &gt;= <span class="number">0</span> &amp;&amp; L-&gt;r[j]&gt;key;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                L-&gt;r[j+<span class="number">1</span>] = L-&gt;r[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; <span class="number">0</span>)</span><br><span class="line">                L-&gt;r[<span class="number">0</span>] = key;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                L-&gt;r[j+<span class="number">1</span>] = key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void SelectSort(SqList *L)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,min;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span> ;i&lt;L-&gt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min = i;</span><br><span class="line">        <span class="keyword">for</span>(j = i+<span class="number">1</span>;j&lt;L-&gt;length;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(L-&gt;r[min] &gt; L-&gt;r[j])   <span class="comment">//sort</span></span><br><span class="line">                min = j;</span><br><span class="line">           <span class="comment">// if(L-&gt;r[min] &lt; L-&gt;r[j])   //desc sort</span></span><br><span class="line">           <span class="comment">//     min = j;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min != i)</span><br><span class="line">            swap(L,i,min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ShellSort(SqList *L)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,gap;</span><br><span class="line">    gap = L-&gt;length;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        gap = gap/<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = gap + <span class="number">1</span>;i&lt;=L-&gt;length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(L-&gt;r[i] &lt; L-&gt;r[i-gap])</span><br><span class="line">            &#123;</span><br><span class="line">                L-&gt;r[<span class="number">0</span>] = L-&gt;r[i];</span><br><span class="line">                <span class="keyword">for</span>(j = i-gap;j&gt;<span class="number">0</span> &amp;&amp; L-&gt;r[j] &gt; L-&gt;r[<span class="number">0</span>];j-=gap)</span><br><span class="line">                L-&gt;r[j+gap] = L-&gt;r[j];</span><br><span class="line"></span><br><span class="line">                L-&gt;r[j+gap] = L-&gt;r[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(gap &gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void HeapAdjest(SqList *L,<span class="keyword">int</span> s,<span class="keyword">int</span> m)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> temp = L-&gt;r[s];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">2</span>*s;i &lt;= m;i *= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; m &amp;&amp; L-&gt;r[i] &lt; L-&gt;r[i+<span class="number">1</span>])</span><br><span class="line">            ++i;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt;= L-&gt;r[i])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        L-&gt;r[s] = L-&gt;r[i];</span><br><span class="line">        s=i;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;r[s] = temp;</span><br><span class="line">&#125;</span><br><span class="line">void HeapSort(SqList *L)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=L-&gt;length/<span class="number">2</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        HeapAdjest(L,i,L-&gt;length);</span><br><span class="line">    <span class="keyword">for</span>(i=L-&gt;length;i&gt;<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(L,<span class="number">1</span>,i);</span><br><span class="line">        HeapAdjest(L,<span class="number">1</span>,i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Partition3(SqList *L,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> pivotkey;</span><br><span class="line">    <span class="keyword">int</span> m = low + (high - low)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;r[low] &gt; L-&gt;r[high])</span><br><span class="line">        swap(L,low,high);</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;r[m] &gt; L-&gt;r[high])</span><br><span class="line">        swap(L,m,high);</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;r[m] &gt; L-&gt;r[low])</span><br><span class="line">        swap(L,low,m);</span><br><span class="line">    pivotkey = L-&gt;r[low];</span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high &amp;&amp; L-&gt;r[high] &gt; pivotkey)</span><br><span class="line">            high--;</span><br><span class="line">        swap(L,low,high);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(low &lt; high &amp;&amp; L-&gt;r[low] &lt; pivotkey)</span><br><span class="line">            low++;</span><br><span class="line">        swap(L,low,high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight zephir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>字典树</title>
    <link href="http://yoursite.com/2019/08/30/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    <id>http://yoursite.com/2019/08/30/字典树/</id>
    <published>2019-08-30T00:56:42.000Z</published>
    <updated>2019-08-30T00:57:54.797Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字典树边作为存储字母，节点表示从根节点到此节点路径上的所有字母。所以叶子节点存储全部单词。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 26</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>[<span class="title">Max</span>];</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="comment">//创建一个新节点</span></span><br><span class="line"><span class="function">Node *<span class="title">createNew</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *p = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;Max;i++)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;next[i] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入一个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert_str</span><span class="params">(<span class="keyword">char</span> str[], Node *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">Node *t, *p = head;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> c = str[i] - <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;next[c] == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">t = createNew();</span><br><span class="line">p-&gt;next[c] = t;</span><br><span class="line">p-&gt;num++;</span><br><span class="line"><span class="comment">//cout&lt;&lt;p-&gt;num&lt;&lt;endl;</span></span><br><span class="line">p = p-&gt;next[c];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next[c];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_str</span><span class="params">(<span class="keyword">char</span> str[], Node *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *p = head;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> c = str[i] - <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;next[c] == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"不存在字符串"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next[c];</span><br><span class="line">count = p-&gt;num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"nihao"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Node *head = createNew();</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s, <span class="built_in">strcmp</span>(s, <span class="string">"quit"</span>))</span><br><span class="line">&#123;</span><br><span class="line">Insert_str(s, head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c = Search_str(<span class="string">"abc"</span>, head);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树非递归遍历</title>
    <link href="http://yoursite.com/2019/08/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2019/08/30/二叉树非递归遍历/</id>
    <published>2019-08-29T16:12:44.000Z</published>
    <updated>2019-08-30T01:51:08.578Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrderTranverse</span><span class="params">(Tree* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;Tree*&gt; skTree;</span><br><span class="line">skTree.push_back(root);</span><br><span class="line"><span class="built_in">vector</span>&lt;Tree*&gt; vTree;</span><br><span class="line"><span class="keyword">while</span>(skTree.size() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Tree* tmp = skTree.top();</span><br><span class="line">vTree.push_back(tmp);</span><br><span class="line"><span class="keyword">if</span>(tmp-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">skTree.push_back(tmp-&gt;right);</span><br><span class="line"><span class="keyword">if</span>(tmp-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">skTree.push_back(tmp-&gt;left);</span><br><span class="line"></span><br><span class="line">skTree.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrderTransverse</span><span class="params">(Tree* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">statck&lt;Tree*&gt; skTree;</span><br><span class="line">skTree.push_back(root);</span><br><span class="line"><span class="built_in">vector</span>&lt;Tree*&gt; vTree;</span><br><span class="line"><span class="keyword">while</span>(skTree.size() &gt; <span class="number">0</span> || head != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(head != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">skTree.push(head);</span><br><span class="line">head = head-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Tree* tmp = skTree.top();</span><br><span class="line">vTree.push_back(tmp);</span><br><span class="line">head = head-&gt;right;</span><br><span class="line">skTree.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backOrderTransverse</span><span class="params">(Tree* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;Tree*&gt; skTree;</span><br><span class="line"><span class="built_in">stack</span>&lt;Tree*&gt; resTree;</span><br><span class="line"><span class="built_in">vector</span>&lt;Tree*&gt; vTree;</span><br><span class="line">skTree.push(root);</span><br><span class="line"><span class="keyword">while</span>(skTree.size() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Tree* tmp = skTree.top();</span><br><span class="line">resTree.push(tmp);</span><br><span class="line">skTree.pop();</span><br><span class="line"><span class="keyword">if</span>(tmp-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">skTree.push(tmp-&gt;left);</span><br><span class="line"><span class="keyword">if</span>(tmp-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">skTree.push(tmp-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(resTree.size() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Tree* resTmp = resTree.top();</span><br><span class="line">vTree.push(resTmp);</span><br><span class="line">resTree.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排列组合</title>
    <link href="http://yoursite.com/2019/08/30/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    <id>http://yoursite.com/2019/08/30/排列组合/</id>
    <published>2019-08-29T16:11:06.000Z</published>
    <updated>2019-08-29T16:11:45.857Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">一、全排列</span><br><span class="line"><span class="comment">//这里的一个难点在于vecPermutated不用清零。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Permutation</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vecPermutated, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vecWaitPermuta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (vecWaitPermuta.size() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator itNum = vecWaitPermuta.begin();itNum != vecWaitPermuta.end();++itNum)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vecPermutatedTmp = vecPermutated;</span><br><span class="line">vecPermutatedTmp.push_back(*itNum);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vecWaitPermutaTmp = vecWaitPermuta;</span><br><span class="line"><span class="comment">//删除当前已经加入排列完毕的元素</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator retFind = find(vecWaitPermutaTmp.begin(), vecWaitPermutaTmp.end(), *itNum);</span><br><span class="line"><span class="keyword">if</span> (vecWaitPermutaTmp.end() != retFind)</span><br><span class="line">&#123;</span><br><span class="line">vecWaitPermutaTmp.erase(retFind);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继续递归调用排列算法</span></span><br><span class="line">Permutation(vecPermutatedTmp, vecWaitPermutaTmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//一组排列完毕</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印排列结果</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vecPermutated.size();++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vecPermutated.at(i) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">二、组合问题</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine</span><span class="params">( <span class="keyword">int</span> a[], <span class="keyword">int</span> n, <span class="keyword">int</span> mspan class="keyword">int</span> b[], <span class="keyword">const</span> <span class="keyword">int</span> M )</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;=m; i--)   <span class="comment">// 注意这里的循环范围</span></span><br><span class="line">&#123;</span><br><span class="line">b[m<span class="number">-1</span>] = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (m &gt; <span class="number">1</span>)</span><br><span class="line">combine(a,i<span class="number">-1</span>,m<span class="number">-1</span>,b,M);</span><br><span class="line"><span class="keyword">else</span>                     <span class="comment">// m == 1, 输出一个组合</span></span><br><span class="line">&#123;   </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=M<span class="number">-1</span>; j&gt;=<span class="number">0</span>; j--)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[b[j]] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">a[i] = i+<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 递归方法</span></span><br><span class="line"><span class="keyword">int</span> b[M];</span><br><span class="line">combine(a,N,M,b,M);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="http://yoursite.com/2019/08/30/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://yoursite.com/2019/08/30/并查集/</id>
    <published>2019-08-29T16:08:28.000Z</published>
    <updated>2019-08-29T16:10:33.573Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>题目背景：<br>有n个地点，m条路<br>给出现有路径，求在修多少路可以是n个地点互通。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//4 2 4个点，2条路</span></span><br><span class="line"><span class="comment">//1 3 4 3</span></span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">1000</span>];</span><br><span class="line"><span class="comment">//查找掌门同时路径压缩</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = x;</span><br><span class="line"><span class="keyword">while</span> (pre[r] != r)  <span class="comment">//直到找到掌门为止，无路径压缩</span></span><br><span class="line">r = pre[r];      </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = x; <span class="keyword">int</span> j;    <span class="comment">//路径压缩</span></span><br><span class="line"><span class="keyword">while</span> (i != r)</span><br><span class="line">&#123;</span><br><span class="line">j = pre[i];      <span class="comment">//i的上级  </span></span><br><span class="line">pre[i] = r;      <span class="comment">//指向大掌门</span></span><br><span class="line">i = j;           <span class="comment">//记下i</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>   <span class="comment">//掌门人之间连接起来</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fx = find(x);</span><br><span class="line"><span class="keyword">int</span> fy = find(y);</span><br><span class="line"><span class="keyword">if</span> (fx != fy)</span><br><span class="line">&#123;</span><br><span class="line">pre[fx] = fy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k,m, p1, p2, i, total, f1, f2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt;m;          <span class="comment">//读入n个位置，m条路                                                         //刚开始的时候，有n个城镇，一条路都没有 //那么要修n-1条路才能把它们连起来</span></span><br><span class="line"></span><br><span class="line">total = n - <span class="number">1</span>;         <span class="comment">//连接n个顶点，使用n-1条路</span></span><br><span class="line"><span class="comment">//每个点互相独立，自成一个集合，从1编号到n，所以每个点的上级都是自己</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>;i &lt;= n;i++) &#123; pre[i] = i; &#125;                <span class="comment">//共有m条路</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;    <span class="comment">//下面这段代码，其实就是join函数，只是稍作改动以适应题目要求</span></span><br><span class="line"> <span class="comment">//每读入一条路，看它的端点p1，p2是否已经在一个连通分支里了</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p1 &gt;&gt; p2;</span><br><span class="line">f1 = find(p1);</span><br><span class="line">f2 = find(p2);</span><br><span class="line"><span class="comment">//如果是不连通的，那么把这两个分支连起来</span></span><br><span class="line"><span class="comment">//分支的总数就减少了1，还需建的路也就减了1</span></span><br><span class="line"><span class="keyword">if</span> (f1 != f2)</span><br><span class="line">&#123;</span><br><span class="line">pre[f2] = f1;</span><br><span class="line">total--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果两点已经连通了，那么这条路只是在图上增加了一个环 //对连通性没有任何影响，无视掉</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后输出还要修的路条数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, k-total);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;题目背景：&lt;br&gt;有n个地点，m条路&lt;br&gt;给出现有路径，求在修多少路可以是n个地点互通。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>按照任意字符分隔</title>
    <link href="http://yoursite.com/2019/08/30/%E6%8C%89%E7%85%A7%E4%BB%BB%E6%84%8F%E5%AD%97%E7%AC%A6%E5%88%86%E9%9A%94/"/>
    <id>http://yoursite.com/2019/08/30/按照任意字符分隔/</id>
    <published>2019-08-29T16:07:04.000Z</published>
    <updated>2019-08-29T16:07:55.216Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str = <span class="string">"zxd,xian,xidian"</span>;</span><br><span class="line"><span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(str)</span></span>;</span><br><span class="line"><span class="built_in">string</span> out;</span><br><span class="line"><span class="keyword">while</span> (getline(ss, out, <span class="string">','</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
      
    
    </summary>
    
    
      <category term="基础知识" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>x的n次幂</title>
    <link href="http://yoursite.com/2019/08/30/x%E7%9A%84n%E6%AC%A1%E5%B9%82/"/>
    <id>http://yoursite.com/2019/08/30/x的n次幂/</id>
    <published>2019-08-29T16:04:31.000Z</published>
    <updated>2019-08-29T16:06:16.459Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mypow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = mypow(x, n / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> t*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = mypow(x, n / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> t*t*x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">pow</span>(n, m) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mypow(n, m) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>memcpy函数</title>
    <link href="http://yoursite.com/2019/08/30/memcpy%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/08/30/memcpy函数/</id>
    <published>2019-08-29T16:02:33.000Z</published>
    <updated>2019-08-29T16:04:02.022Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照单字节拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">my_memcpy</span><span class="params">(<span class="keyword">void</span>* des, <span class="keyword">void</span>* src, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (des == <span class="literal">NULL</span> || src == <span class="literal">NULL</span> || len &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* pdes = (<span class="keyword">char</span> *)des;</span><br><span class="line"><span class="keyword">char</span>* psrc = (<span class="keyword">char</span> *)src;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pdes &gt; psrc &amp;&amp; pdes &lt; psrc + len)</span><br><span class="line">&#123;</span><br><span class="line">pdes = pdes + len - <span class="number">1</span>;</span><br><span class="line">psrc = psrc + len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (len--)</span><br><span class="line">&#123;</span><br><span class="line">*pdes-- = *psrc--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (len--)</span><br><span class="line">&#123;</span><br><span class="line">*pdes++ = *psrc++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> des;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按照4字节拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">my_fastmemcpy</span><span class="params">(<span class="keyword">void</span> *des, <span class="keyword">void</span>* src, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (des == <span class="literal">NULL</span> || src == <span class="literal">NULL</span> || len &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *pdes = (<span class="keyword">int</span> *)des;</span><br><span class="line"><span class="keyword">int</span> *psrc = (<span class="keyword">int</span> *)src;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> blocks = len / <span class="number">4</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> res = len % <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *tmp1 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> *tmp2 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pdes &gt; psrc &amp;&amp; pdes &lt; psrc + len)</span><br><span class="line">&#123;</span><br><span class="line">tmp1 = (<span class="keyword">char</span> *)pdes + len - <span class="number">1</span>;</span><br><span class="line">tmp2 = (<span class="keyword">char</span> *)psrc + len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (res--)</span><br><span class="line">&#123;</span><br><span class="line">*tmp1-- = *tmp2--;</span><br><span class="line">&#125;</span><br><span class="line">pdes = (<span class="keyword">int</span> *)tmp1;</span><br><span class="line">psrc = (<span class="keyword">int</span> *)tmp2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (blocks--)</span><br><span class="line">&#123;</span><br><span class="line">*pdes-- = *psrc--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (blocks--)</span><br><span class="line">&#123;</span><br><span class="line">*pdes++ = *psrc++;</span><br><span class="line">&#125;</span><br><span class="line">tmp1 = (<span class="keyword">char</span> *)pdes;</span><br><span class="line">tmp2 = (<span class="keyword">char</span> *)psrc;</span><br><span class="line"><span class="keyword">while</span> (res--)</span><br><span class="line">&#123;</span><br><span class="line">*tmp1++ = *tmp2++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> des;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//my_memcpy(b, a, sizeof(a));</span></span><br><span class="line">my_fastmemcpy(b, a, <span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; b[<span class="number">1</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; b[<span class="number">2</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; b[<span class="number">3</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; b[<span class="number">4</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; b[<span class="number">5</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; b[<span class="number">6</span>]</span><br><span class="line">&lt;&lt; <span class="string">" "</span> &lt;&lt; b[<span class="number">7</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; b[<span class="number">8</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; b[<span class="number">9</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
      
    
    </summary>
    
    
      <category term="基础知识" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>宏函数linux版</title>
    <link href="http://yoursite.com/2019/08/30/%E5%AE%8F%E5%87%BD%E6%95%B0linux%E7%89%88/"/>
    <id>http://yoursite.com/2019/08/30/宏函数linux版/</id>
    <published>2019-08-29T16:00:22.000Z</published>
    <updated>2019-08-29T16:01:47.043Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个例子展示了怎样在宏中定义变量，怎样使用if-else，怎样返回值。</span></span><br><span class="line"><span class="comment">//int tmp = 5; 定义一个int型的变量，在结尾要加;</span></span><br><span class="line"><span class="comment">//if-else      可以按照c语言一样使用if-else，for，while等</span></span><br><span class="line"><span class="comment">//(addr+tmp) ; 宏函数的最后一句就是返回值</span></span><br><span class="line"><span class="comment">//(&#123;...&#125;)      宏函数有返回值时要用()将宏包起来</span></span><br><span class="line"><span class="comment">//  \          \ 代表将多行转化成一行输出，预编译时完成转化。宏定义需要写成一行</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KADDR(addr)(&#123; \</span></span><br><span class="line">    <span class="keyword">int</span> tmp = addr;   \</span><br><span class="line">    <span class="keyword">if</span>(addr&gt;<span class="number">5</span>)  \</span><br><span class="line">        tmp=<span class="number">2</span>;  \</span><br><span class="line">    <span class="keyword">else</span>        \</span><br><span class="line">        tmp = <span class="number">3</span>;\</span><br><span class="line">    (addr + tmp);\</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是昨天的四个问题，你的思路也是对的，接下来按照你的思路练习一下。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALIGN_DOWN(a,b) &#123; \</span></span><br><span class="line">    (a)-(a)%(b)\</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALIGN_UP(a,b) &#123;\</span></span><br><span class="line">    (a)+(b)-(a)%(b)\</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALIGN_2N_DOWN(a,b) (&#123;   \</span></span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;  \</span><br><span class="line">    <span class="keyword">do</span>&#123;     \</span><br><span class="line">        b = b&gt;&gt;<span class="number">1</span>;     \</span><br><span class="line">        c += (b)&amp;a;   \</span><br><span class="line">    &#125;<span class="keyword">while</span>(b!=<span class="number">0</span>);     \</span><br><span class="line">    c = a-c;          \</span><br><span class="line">    c;                \</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALIGN_2N_UP(a,b) (&#123; \</span></span><br><span class="line">    <span class="keyword">int</span> _b = (b);       \</span><br><span class="line">    ((_b) + ALIGN_2N_DOWN(a,b));\</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> addr = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> g = KADDR(addr);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;g&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">65</span>, b = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> c = ALIGN_DOWN(<span class="number">65</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">int</span> d = ALIGN_UP(<span class="number">65</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">int</span> e = ALIGN_2N_DOWN(a, b);</span><br><span class="line">    a = <span class="number">65</span>;</span><br><span class="line">    b = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> f = ALIGN_2N_UP(a,b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
      
    
    </summary>
    
    
      <category term="基础知识" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>DFS与BFS</title>
    <link href="http://yoursite.com/2019/08/29/DFS%E4%B8%8EBFS/"/>
    <id>http://yoursite.com/2019/08/29/DFS与BFS/</id>
    <published>2019-08-29T15:57:22.000Z</published>
    <updated>2019-08-30T01:13:00.001Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 4</span></span><br><span class="line"><span class="keyword">bool</span> visited[MAXVEX] = &#123; <span class="literal">false</span>, <span class="literal">false</span> ,<span class="literal">false</span> ,<span class="literal">false</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&gt; adj(MAXVEX);</span><br><span class="line"><span class="comment">//有向图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">adj[v].push_back(w);   <span class="comment">//将顶点w加到v的链表上</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无向图</span></span><br><span class="line"><span class="comment">//void addEdge(int v, int w)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//adj[v].push_back(w);     // 将w加到v的list </span></span><br><span class="line"><span class="comment">//adj[w].push_back(v);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//单个连通分量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> vx = v;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">queue</span>;</span><br><span class="line">visited[vx] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">queue</span>.push_back(vx);</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">queue</span>.empty())</span><br><span class="line">&#123;</span><br><span class="line">vx = <span class="built_in">queue</span>.front();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vx &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">queue</span>.pop_front();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (it = adj[vx].begin();it != adj[vx].end();it++)  <span class="comment">//扫描链表</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!visited[*it])</span><br><span class="line">&#123;</span><br><span class="line">visited[*it] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">queue</span>.push_back(*it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多连通分量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MutilBFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; MAXVEX;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!visited[i])</span><br><span class="line">&#123;</span><br><span class="line">bfs(i);  <span class="comment">//多个连通分量调用多次BFS，从0个分量开始遍历</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">visited[v] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span> (it = adj[v].begin();it != adj[v].end();++it)  <span class="comment">//遍历一个节点然后到下一个节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!visited[*it])</span><br><span class="line">dfs(*it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">addEdge(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">addEdge(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">addEdge(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">addEdge(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">addEdge(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">addEdge(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">bfs(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//dfs(2);</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>hash表</title>
    <link href="http://yoursite.com/2019/08/29/hash%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/08/29/hash表/</id>
    <published>2019-08-29T15:54:38.000Z</published>
    <updated>2019-08-30T02:11:55.248Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUCCESS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNSUCCESS 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASHSIZE 12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULLKEY 65536</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">hashnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hashnode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;HashNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    HashNode *head[HASHSIZE];</span><br><span class="line">&#125;HashTable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitHashTable</span><span class="params">(HashTable *H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    m = HASHSIZE;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            H-&gt;head[i] = (HashNode *)<span class="built_in">malloc</span>(m * <span class="keyword">sizeof</span>(HashNode));</span><br><span class="line">            H-&gt;head[i]-&gt;data = NULLKEY;</span><br><span class="line">            H-&gt;head[i]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hash function,the function can be changeable</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hash</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key % m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertHash</span><span class="params">(HashTable *H,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> addr = Hash(key);</span><br><span class="line">    HashNode *node = (HashNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashNode));</span><br><span class="line">    HashNode *tmp = H-&gt;head[addr]-&gt;next;</span><br><span class="line"></span><br><span class="line">    node-&gt;data = key;</span><br><span class="line">    node-&gt;next = tmp;</span><br><span class="line"></span><br><span class="line">    H-&gt;head[addr]-&gt;next = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SearchHash</span><span class="params">(HashTable *H,<span class="keyword">int</span> key,<span class="keyword">int</span> *addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HashNode *tmp;</span><br><span class="line">    *addr = Hash(key);</span><br><span class="line"></span><br><span class="line">        tmp = H-&gt;head[*addr]-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(tmp != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp-&gt;data == key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"find the key\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> UNSUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> addr = <span class="number">0</span>;</span><br><span class="line">    HashNode *tmp;</span><br><span class="line">    HashTable *h = (HashTable *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashTable));</span><br><span class="line">    InitHashTable(h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> elem[<span class="number">12</span>] = &#123;<span class="number">12</span>,<span class="number">67</span>,<span class="number">56</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">37</span>,<span class="number">22</span>,<span class="number">29</span>,<span class="number">15</span>,<span class="number">47</span>,<span class="number">48</span>,<span class="number">34</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        InsertHash(h,elem[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = h-&gt;head[i]-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(tmp != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,tmp-&gt;data);</span><br><span class="line">            tmp = tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(SearchHash(h,elem[i],&amp;addr) == SUCCESS)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,addr);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"not find\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>查找算法</title>
    <link href="http://yoursite.com/2019/08/29/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/08/29/查找算法/</id>
    <published>2019-08-29T15:54:08.000Z</published>
    <updated>2019-08-29T15:54:08.220Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>智能指针</title>
    <link href="http://yoursite.com/2019/08/29/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <id>http://yoursite.com/2019/08/29/智能指针/</id>
    <published>2019-08-29T15:41:11.000Z</published>
    <updated>2019-09-12T02:19:10.546Z</updated>
    
    <content type="html"><![CDATA[<p>智能指针<br>    1、智能指针是利用一种RAII的技术对普通指针进行封装，其实是一个对象，行为却像一个指针。<br>    2、智能指针时防止忘记调用delete或两次delete带来的内存问题。<br>    3、将值语义转化成对象语义。<br>    4、智能指针的使用shared_ptr/weak_ptr/unique_ptr<br>        shared_ptr:多个指针指向相同的对象。使用引用计数，每次使用它，内部引用+1，每次析构，内部引用-1.为0时自动释放内存。陷阱是循环引用。<br>        weak_ptr:协助shared_ptr工作，不会引起weak_ptr的引用计数的加减。<br>        循环引用问题，A类引用B类的shared_ptr,B类应用A类的shared_ptr。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Myshared_ptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; ptra = make_shared&lt;<span class="keyword">int</span>&gt;(a);</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; ptra2(ptra);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ptra.use_count() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span>* pb = &amp;a;</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; ptrb = make_shared&lt;<span class="keyword">int</span>&gt;(b);</span><br><span class="line">ptra2 = ptrb;</span><br><span class="line">pb = ptra.get();</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ptra.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ptrb.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myweak_ptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; sh_ptr = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sh_ptr.use_count() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">weak_ptr&lt;<span class="keyword">int</span>&gt; wp(sh_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; wp.use_count() &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!wp.expired())  <span class="comment">//等价use_count()==0</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; sh_ptr2 = wp.lock();<span class="comment">//从被观测的shared_ptr中获得一个可用的shared_ptr对象</span></span><br><span class="line">*sh_ptr = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; wp.use_count() &lt;&lt; <span class="built_in">endl</span>;     <span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//std::shared_ptr&lt;Child&gt; ChildPtr;</span></span><br><span class="line"><span class="built_in">std</span>::weak_ptr&lt;Child&gt; ChildPtr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setChild</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Child&gt; child)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;ChildPtr = child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//new shared_ptr</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;ChildPtr.lock()) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~Parent() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Parent&gt; ParentPtr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPartent</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Parent&gt; parent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;ParentPtr = parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;ParentPtr.use_count()) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~Child() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::weak_ptr&lt;Parent&gt; wpp;</span><br><span class="line"><span class="built_in">std</span>::weak_ptr&lt;Child&gt; wpc;</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Parent&gt; p(<span class="keyword">new</span> Parent);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Child&gt; c(<span class="keyword">new</span> Child);</span><br><span class="line">p-&gt;setChild(c);</span><br><span class="line">c-&gt;setPartent(p);</span><br><span class="line">wpp = p;</span><br><span class="line">wpc = c;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; p.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; c.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; wpp.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; wpc.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;  <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;智能指针&lt;br&gt;    1、智能指针是利用一种RAII的技术对普通指针进行封装，其实是一个对象，行为却像一个指针。&lt;br&gt;    2、智能指针时防止忘记调用delete或两次delete带来的内存问题。&lt;br&gt;    3、将值语义转化成对象语义。&lt;br&gt;    4、智能指针的使用shared_ptr/weak_ptr/unique_ptr&lt;br&gt;        shared_ptr:多个指针指向相同的对象。使用引用计数，每次使用它，内部引用+1，每次析构，内部引用-1.为0时自动释放内存。陷阱是循环引用。&lt;br&gt;        weak_ptr:协助shared_ptr工作，不会引起weak_ptr的引用计数的加减。&lt;br&gt;        循环引用问题，A类引用B类的shared_ptr,B类应用A类的shared_ptr。&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础知识" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>sed指令--高阶</title>
    <link href="http://yoursite.com/2019/05/01/sed%E6%8C%87%E4%BB%A4-%E9%AB%98%E9%98%B6/"/>
    <id>http://yoursite.com/2019/05/01/sed指令-高阶/</id>
    <published>2019-05-01T07:16:47.000Z</published>
    <updated>2019-05-01T07:33:21.035Z</updated>
    
    <content type="html"><![CDATA[<p>讲述正则表达式，sed结合正则表达式的高阶指令</p><a id="more"></a><p>正则表达式：<br>    特殊字符:   .*[]^${}+?|()<br>    记住不能在文本中使用这些特殊字符。必须用\转义</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;讲述正则表达式，sed结合正则表达式的高阶指令&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="operate" scheme="http://yoursite.com/tags/operate/"/>
    
  </entry>
  
  <entry>
    <title>static成员变量的赋值</title>
    <link href="http://yoursite.com/2019/04/27/static-%E6%88%90%E5%91%98/"/>
    <id>http://yoursite.com/2019/04/27/static-成员/</id>
    <published>2019-04-27T15:52:22.000Z</published>
    <updated>2019-04-27T16:04:22.144Z</updated>
    
    <content type="html"><![CDATA[<p>讲述static成员变量的初始化与赋值</p><a id="more"></a><p>static变量在类内声明时，属于类，或者说属于所有对象，我们可以使用类或对象调用。<br>但是static变量的定义放到哪里呢？<br>&lt;&lt;c++ primer&gt;&gt;说在类外定义和初始化是保证static成员变量只被定义一次的好方法。<br>但，为什么static const int就可以在类里面初始化呢？<br>想起C中一个函数里定义一个static变量是为了保证只初始化一次。<br>那么，是否可以这样理解:<br>static数据成员在类外定义和初始化是为了保证只被定义和初始化一次,<br>这样编译器就不必考虑类的函数里面第一个对static变量的’=’操作是赋值还是初始化了。<br>比如：<br>class A{<br>    static int a = 5;<br>    int b = 6;<br>};<br>接下来我们用对象调用a,b<br>A a1;<br>a1.a = 6;//此时a被赋值成6</p><p>A a2;   //此时编译器不知道成员a是5 还是6，就造成错误。</p><p>所以C++规定static成员变量只能在类内声明，在类外实例化。<br>比如如下操作时合理的<br>.h文件声明<br>#include “fixed_alloc.h”<br>class Foo{<br>    private:<br>        int i;<br>    public:<br>        Foo(int x):i(x){}<br>        int get(){<br>            return i;<br>        }   </p><pre><code>    static void* operator new(size_t size);    static void operator delete(void* p,size_t size);protected:    static FixedAlloc alloc;    static const int a = 5;</code></pre><p>};<br>.cpp文件中实例化<br>#include “Foo.h”<br>FixedAlloc Foo::alloc(sizeof(Foo),64);<br>void* Foo::operator new(size_t size)<br>{<br>    if(sizeof(Foo) != size)<br>        return ::operator new(size);</p><pre><code>return alloc.allocate();</code></pre><p>}<br>void Foo::operator delete(void* p,size_t size)<br>{<br>    if(p == NULL)<br>        return;<br>    if(size != sizeof(Foo))<br>    {<br>        ::operator delete(p);<br>        return;<br>    }<br>    return alloc.deallocate(p);<br>}<br>这里特别注意static结合const使用时是可以在类内初始化的，看了上面的解释就能明白为什么。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;讲述static成员变量的初始化与赋值&lt;/p&gt;
    
    </summary>
    
      <category term="知识点" scheme="http://yoursite.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>ctags插件使用</title>
    <link href="http://yoursite.com/2019/04/25/ctags%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/04/25/ctags插件使用/</id>
    <published>2019-04-25T07:31:53.000Z</published>
    <updated>2019-04-25T08:22:40.904Z</updated>
    
    <content type="html"><![CDATA[<p>ctags插件可以实现在多个文件之间跳转，包括转到定义，转回等。</p><a id="more"></a><p>ctags的功能：扫描指定的源文件，找出其中所包含的语法元素，并将找到的相关内容记录下来。<br>ctags是怎样工作的：<br>不管一次扫描多少文件，一条ctags命令把记录的内容都记到一个文件里去，默认是当前目录的tags文件，当然这是可以更改的。<br>每个语法元素对应文件里的一行，学名叫tag entry。<br>1）             开头是tag的名字，其实也就是语法元素的名字，例如记录的是函数的话则tag名就是函数名，记录的是类的话，tag名就是类名。<br>2）             接下来是一个tab。<br>3）             接下来是语法元素所在的文件名。<br>4）             又是一个tab。<br>5）             一条“命令”。这个要解释一下意义：ctags所记录的内容的一个功能就是要帮助像vi这样的编辑器快速定位到语法元素所在的文件中去。前面已经记录了语法元素所在的文件，这条命令的功能就是一旦在vi中打开语法元素所在的文件，并且执行了该“命令”后，vi的光标就能定位到语法元素在文件中的具体位置。所以该“命令”的内容一般分两种，一种是一个正则表达式的搜索命令，一种是第几行的指向命令。默认让ctags在记录时自行选择命令的种类，选择的依据不详，可以通过命令行参数来强制ctags使用某种命令，这里就不多谈了。<br>6）             对于本tag entry（简称tag）所对应的语法元素的描述，例如语法元素的类型等。具体内容和语法元素的种类密切相关。显示哪些描述，显示的格式等都是可以在命令行指定的。例如如下命令要求描述信息中要包含：a表示如果语法元素的类的成员的话，要标明其access（即是public的还是private的）；i表示如果有继承，标明父类；K表示显示语法元素的类型的全称；S表示如果是函数，标明函数的signature；z表示在显示语法元素的类型是使用kind:type的格式。<br>ctags -R –fields=+aiKSz<br>    ctags除了记录上述的各种内容之外，还可以在tags文件中记录本次扫描的各个文件，一个文件名对应一个tag entry。默认是不记录的，要强制记录要是使用如下命令：<br>ctags –R –extra=+f<br>    还可以强制要求ctags做这样一件事情——如果某个语法元素是类的一个成员，当然ctags默认会给其记录一个tag entry（说白了就是在tags文件里写一行），可以要求ctags对同一个语法元素再记一行。举一个例子来说明：假设语法元素是一个成员函数，ctags默认记录的tag entry中的tag的名字就是该函数的名字（不包括类名作为前缀），而我们强制要求ctags多记的那个tag entry的tag的名字是包含了类明作为前缀的函数的全路径名。这样做有什么好处见下文分析。强制ctags给类的成员函数多记一行的命令为：<br>ctags -R –extra=+q。</p><p>ctrl+] : CTRL+] 命令会取当前光标下的word作为tag的名字并直接跳转。<br>        也可以，现在你在Vim中要跳到一个函数的定义(如startlist)就可以用下面的命令：<br>           (ex command) :tag startlist<br>ctrl+T : CTRL+T命令会跳到你前一次的tag处。<br>      “:tag”命令会在当前窗口中载入包含了目标函数定义的文件。但假设你不仅要查看新的函数定义。<br>      还要同时保留当前的上下文呢？你可以在”:tag”后使用一个分隔窗口命令”:split”。Vim还有一个一举两得的命令：<br>          (ex command) :stag tagname<br>ctags -R: 搜索整个目录树，然后告诉编译器你的tags在哪个文件中:set tags=~/proj/tags<br>同名tags：当一个函数被多次重载(或者几个类里都定义了一些同名的函数)，”:tag”命令会跳转到第一个符合条件的。如果当前文件中就有一个匹配的，那又会优先使用它。当然还得有办法跳转到其它符合条件的tag去：<br>          (ex command) :tnext<br>          重复使用这个命令可以发现其余的同名tag。如果实在太多，还可以用下面的命令从中直接选取一个：<br>          (ex command) :tselect tagname<br>分隔窗口:(ex command) :stag tagname<br>下面的命令可以为当前目录下的所有C程序文件生成对应的tags文件：<br>    (shell command) ctags *.c</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ctags插件可以实现在多个文件之间跳转，包括转到定义，转回等。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="operate" scheme="http://yoursite.com/tags/operate/"/>
    
  </entry>
  
</feed>
